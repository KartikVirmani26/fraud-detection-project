# Fraud Detection Model with SMOTE
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from imblearn.over_sampling import SMOTE

# 1. Create synthetic dataset
np.random.seed(42)
data = pd.DataFrame(
    np.random.randn(10000, 30),  # 30 feature columns
    columns=[f"V{i}" for i in range(1, 31)]
)

# 2. Add 'Class' column (0 = Normal, 1 = Fraud)
data["Class"] = np.random.choice([0, 1], size=10000, p=[0.97, 0.03])

# 3. Add 'Transaction Amount' column using log-normal distribution
data["Amount"] = np.random.lognormal(mean=3, sigma=1, size=10000)

print("Dataset Created")
print("Shape:", data.shape)
print(data.head())

# 4. Split into features and labels
X = data.drop("Class", axis=1)
y = data["Class"]

# 5. Handle class imbalance with SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

print("\nAfter SMOTE balancing:")
print(y_resampled.value_counts())

# 6. Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X_resampled, y_resampled, test_size=0.3, random_state=42
)

print("\nData Split into Train & Test")

# 7. Train Random Forest Classifier
model = RandomForestClassifier(n_estimators=200, random_state=42)
model.fit(X_train, y_train)

print("\nModel Trained Successfully")

# 8. Predictions
y_pred = model.predict(X_test)

# 9. Model Evaluation
print("\nModel Evaluation Results")
print("----------------------------------------")
print("Accuracy: {:.2f}%".format(accuracy_score(y_test, y_pred) * 100))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print("               Predicted Normal   Predicted Fraud")
print(f"Actual Normal             {cm[0,0]}                {cm[0,1]}")
print(f"Actual Fraud              {cm[1,0]}                {cm[1,1]}")

# Classification Report (converted to percentages)
report = classification_report(y_test, y_pred, target_names=["Normal", "Fraud"], output_dict=True)

print("\nClassification Report:")
for label in report:
    if label in ["Normal", "Fraud"]:
        precision = report[label]["precision"] * 100
        recall = report[label]["recall"] * 100
        f1 = report[label]["f1-score"] * 100
        support = report[label]["support"]
        print(f"{label:>10} -> Precision: {precision:.2f}%, Recall: {recall:.2f}%, F1-Score: {f1:.2f}% (Support: {support})")

accuracy = report["accuracy"] * 100
print(f"\nOverall Accuracy: {accuracy:.2f}%")
