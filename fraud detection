# Fraud Detection with SMOTE
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from imblearn.over_sampling import SMOTE
import warnings
warnings.filterwarnings('ignore')


np.random.seed(42)

print("=== Fraud Detection Model ===")

# 1. Creating synthetic dataset
print("Creating dataset...")
n_samples = 5000
data = pd.DataFrame(
    np.random.randn(n_samples, 20),
    columns=[f"V{i}" for i in range(1, 21)]
)
data["Class"] = np.random.choice([0, 1], size=n_samples, p=[0.97, 0.03])

# Adding the transaction amounts:
data["Amount"] = np.where(
    data["Class"] == 0,
    np.random.lognormal(2.0, 0.8, n_samples),  # Normal transactions
    np.random.lognormal(3.5, 1.0, n_samples)   # Fraud transactions
)

print(f"Dataset: {data.shape[0]} samples, {data.shape[1]} features")
print(f"Normal: {(data['Class']==0).sum()}, Fraud: {(data['Class']==1).sum()}")

# 2. Preparing the data 
X = data.drop("Class", axis=1)
y = data["Class"]

# 3. Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y
)

# 4. Applying SMOTE to train data
print("\nApplying SMOTE...")
smote = SMOTE(random_state=42)
X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)

print(f"After SMOTE: {len(X_train_balanced)} balanced samples")

# 5. Training the model model
print("Training Random Forest...")
model = RandomForestClassifier(
    n_estimators=100,
    max_depth=10,
    random_state=42,
    class_weight='balanced'
)

model.fit(X_train_balanced, y_train_balanced)

# 6. Make predictions
y_pred = model.predict(X_test)

# 7. Evaluate model
print("\n=== Results ===")
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.3f} ({accuracy*100:.1f}%)")

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
tn, fp, fn, tp = cm.ravel()

print(f"\nConfusion Matrix:")
print(f"           Predicted")
print(f"        Normal  Fraud")
print(f"Normal    {tn:3d}    {fp:3d}")
print(f"Fraud     {fn:3d}    {tp:3d}")

# Key metrics
precision = tp / (tp + fp) if (tp + fp) > 0 else 0
recall = tp / (tp + fn) if (tp + fn) > 0 else 0
f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0

print(f"\nFraud Detection Metrics:")
print(f"Precision: {precision:.3f} ({precision*100:.1f}%)")
print(f"Recall:    {recall:.3f} ({recall*100:.1f}%)")
print(f"F1-Score:  {f1:.3f} ({f1*100:.1f}%)")

print(f"\nFrauds detected: {tp}/{tp+fn}")
print(f"False alarms: {fp}")

print("\nâœ“ Fraud detection completed!")
